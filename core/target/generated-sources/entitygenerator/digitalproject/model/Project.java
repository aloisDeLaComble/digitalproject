
/*
 * Generated by Jspresso. All rights reserved.
 */
package digitalproject.model;
/**
 * Project entity.
 * <p>
 * Generated by Jspresso. All rights reserved.
 * <p>
 *
 * @hibernate.mapping
 *           default-access = "org.jspresso.framework.model.persistence.hibernate.property.EntityPropertyAccessor"
 *           default-cascade="persist,merge,save-update"
 * @hibernate.class
 *           table = "PROJECT"
 *           dynamic-insert = "true"
 *           dynamic-update = "true"
 *           persister =
 *            "org.jspresso.framework.model.persistence.hibernate.entity.persister.EntityProxyJoinedSubclassEntityPersister"
 * @author Generated by Jspresso
 */
@SuppressWarnings("all")
public interface Project extends
  org.jspresso.framework.model.entity.IEntity,
  digitalproject.model.Traceable {
  /**
   * Gets the id.
   *
   * @hibernate.id
   *           generator-class = "assigned"
   *           type = "string"
   * @hibernate.column
   *           name = "ID"
   *           length = "36"
   * @return the id.
   */
  java.io.Serializable getId();

  /**
   * Gets the version.
   *
   * @hibernate.version
   *           unsaved-value = "null"
   *           column = "VERSION"
   *           type = "integer"
   * @hibernate.column
   *           name = "VERSION"
   *           precision = "11"
   * @return the version.
   */
  @org.springframework.data.annotation.Version
  java.lang.Integer getVersion();


  /**
   * Constant value for name.
   */
  String NAME = "name";

  /**
   * Gets the name.
   *
   * @hibernate.property
   * @hibernate.column
   *           name = "NAME"
   *           length = "64"
   * @return the name.
   */
  java.lang.String getName();

  /**
   * Sets the name.
   *
   * @param name
   *          the name to set.
   */
  void setName(java.lang.String name);



  /**
   * Constant value for technologies.
   */
  String TECHNOLOGIES = "technologies";

  /**
   * Gets the technologies.
   *
   * @hibernate.set
   *           cascade = "persist,merge,save-update,delete"
   *           table = "TECHNOLOGY_PROJECTS"
   *           inverse = "true"
   * @hibernate.key
   *           column = "PROJECT_ID"
   *           foreign-key = "TECHNOLOGY_PROJECTS_PROJECT_FK"
   * @hibernate.many-to-many
   *           class = "digitalproject.model.Technology"
   *           column = "TECHNOLOGY_ID"
   *           foreign-key = "TECHNOLOGY_PROJECTS_TECHNOLOGY_FK"
   * @return the technologies.
   */
  java.util.Set<digitalproject.model.Technology> getTechnologies();

  /**
   * Sets the technologies.
   *
   * @param technologies
   *          the technologies to set.
   */
  void setTechnologies(java.util.Set<digitalproject.model.Technology> technologies);

  /**
   * Adds an element to the technologies.
   *
   * @param technologiesElement
   *          the technologies element to add.
   */
  void addToTechnologies(digitalproject.model.Technology technologiesElement);

  /**
   * Removes an element from the technologies.
   *
   * @param technologiesElement
   *          the technologies element to remove.
   */
  void removeFromTechnologies(digitalproject.model.Technology technologiesElement);



  /**
   * Constant value for technicalTrainers.
   */
  String TECHNICAL_TRAINERS = "technicalTrainers";

  /**
   * Gets the technicalTrainers.
   *
   * @hibernate.set
   *           cascade = "persist,merge,save-update,delete"
   *           table = "TRAINER_PROJECTS_AS_TECHNICAL_TRAINER"
   *           inverse = "true"
   * @hibernate.key
   *           column = "PROJECT_ID"
   *           foreign-key = "TRAINER_PROJECTS_AS_TECHNICAL_TRAINER_PROJECT_FK"
   * @hibernate.many-to-many
   *           class = "digitalproject.model.Trainer"
   *           column = "TRAINER_ID"
   *           foreign-key = "TRAINER_PROJECTS_AS_TECHNICAL_TRAINER_TRAINER_FK"
   * @return the technicalTrainers.
   */
  java.util.Set<digitalproject.model.Trainer> getTechnicalTrainers();

  /**
   * Sets the technicalTrainers.
   *
   * @param technicalTrainers
   *          the technicalTrainers to set.
   */
  void setTechnicalTrainers(java.util.Set<digitalproject.model.Trainer> technicalTrainers);

  /**
   * Adds an element to the technicalTrainers.
   *
   * @param technicalTrainersElement
   *          the technicalTrainers element to add.
   */
  void addToTechnicalTrainers(digitalproject.model.Trainer technicalTrainersElement);

  /**
   * Removes an element from the technicalTrainers.
   *
   * @param technicalTrainersElement
   *          the technicalTrainers element to remove.
   */
  void removeFromTechnicalTrainers(digitalproject.model.Trainer technicalTrainersElement);



  /**
   * Constant value for usesTrainers.
   */
  String USES_TRAINERS = "usesTrainers";

  /**
   * Gets the usesTrainers.
   *
   * @hibernate.set
   *           cascade = "persist,merge,save-update,delete"
   *           table = "TRAINER_PROJECTS_AS_USES_TRAINER"
   *           inverse = "true"
   * @hibernate.key
   *           column = "PROJECT_ID"
   *           foreign-key = "TRAINER_PROJECTS_AS_USES_TRAINER_PROJECT_FK"
   * @hibernate.many-to-many
   *           class = "digitalproject.model.Trainer"
   *           column = "TRAINER_ID"
   *           foreign-key = "TRAINER_PROJECTS_AS_USES_TRAINER_TRAINER_FK"
   * @return the usesTrainers.
   */
  java.util.Set<digitalproject.model.Trainer> getUsesTrainers();

  /**
   * Sets the usesTrainers.
   *
   * @param usesTrainers
   *          the usesTrainers to set.
   */
  void setUsesTrainers(java.util.Set<digitalproject.model.Trainer> usesTrainers);

  /**
   * Adds an element to the usesTrainers.
   *
   * @param usesTrainersElement
   *          the usesTrainers element to add.
   */
  void addToUsesTrainers(digitalproject.model.Trainer usesTrainersElement);

  /**
   * Removes an element from the usesTrainers.
   *
   * @param usesTrainersElement
   *          the usesTrainers element to remove.
   */
  void removeFromUsesTrainers(digitalproject.model.Trainer usesTrainersElement);



  /**
   * Constant value for students.
   */
  String STUDENTS = "students";

  /**
   * Gets the students.
   *
   * @hibernate.set
   *           cascade = "persist,merge,save-update,delete"
   *           table = "STUDENT_PROJECTS"
   *           inverse = "true"
   * @hibernate.key
   *           column = "PROJECT_ID"
   *           foreign-key = "STUDENT_PROJECTS_PROJECT_FK"
   * @hibernate.many-to-many
   *           class = "digitalproject.model.Student"
   *           column = "STUDENT_ID"
   *           foreign-key = "STUDENT_PROJECTS_STUDENT_FK"
   * @return the students.
   */
  java.util.Set<digitalproject.model.Student> getStudents();

  /**
   * Sets the students.
   *
   * @param students
   *          the students to set.
   */
  void setStudents(java.util.Set<digitalproject.model.Student> students);

  /**
   * Adds an element to the students.
   *
   * @param studentsElement
   *          the students element to add.
   */
  void addToStudents(digitalproject.model.Student studentsElement);

  /**
   * Removes an element from the students.
   *
   * @param studentsElement
   *          the students element to remove.
   */
  void removeFromStudents(digitalproject.model.Student studentsElement);




}
